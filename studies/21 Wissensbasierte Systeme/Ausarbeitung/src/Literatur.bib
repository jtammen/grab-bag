This file was created with JabRef 2.1.
Encoding: UTF8

@ARTICLE{KI-LP96,
  author = {Martin Müller and Gert Smolka},
  title = {{Oz: Nebenläufige Programmierung mit Constraints}},
  journal = {KI - Künstliche Intelligenz},
  year = {1996},
  pages = {55--61},
  month = sep,
  note = {Themenheft: Logische Programmierung},
  abstract = {Dieser Artikel behandelt die Programmiersprache Oz und das ihr zugrundeliegende
	Programmiermodell. Oz ist eine nebenl{\"a}ufige Programmiersprache,
	die Constraintprogrammierung mit funktionaler und objektorientierter
	Programmierung verbindet. Oz ist als Nachfolger von Hochsprachen
	wie Lisp, Prolog und Smalltalk entworfen; diese Sprachen sind nur
	unzureichend f{\"u}r Anwendungen geeignet, die sowohl Probleml{\"o}sungskomponenten
	enthalten, als auch Nebenl{\"a}ufigkeit und Reaktivit{\"a}t. Im
	Vergleich zu Prolog gibt Oz die Idee auf, dass Programme stets auch
	logische Spezifikationen sein m{\"u}ssen. Andererseits erlaubt Oz
	die flexible Programmierung von Inferenzmaschinen, deren Leistungsf{\"a}higkeit
	weit {\"u}ber das in Prolog Machbare hinausgeht. Damit steht insbesondere
	die Funktionalit{\"a}t von CLP-Sprachen wie CHIP bereit.},
  directory = {ProgrammingSysLab},
  filename = {KI-LP96.ps.gz},
  label = {KI-LP96},
  project-key = {C1},
  publisher = {Scientec Publishing, Bad Ems},
  sline = {4726}
}

@MISC{url:mozart-documentation,
  author = {{Mozart Consortium}},
  title = {Mozart Documentation},
  year = {2007},
  url = {http://www.mozart-oz.org/documentation/},
}

@Article{LogicProgr:2003,
 author = {Peter {Van Roy} and Per Brand and Denys Duchier
 and Seif Haridi and Martin Henz and Christian Schulte},
 title = {Logic programming in the context of
 multiparadigm programming: the {Oz} experience},
 journal = {Theory and Practice of Logic Programming},
 note = {To appear.},
 year = 2003,
}

@MASTERSTHESIS{Brunklaus:00,
  title = "Der {Oz} {Inspector} - {Browsen}: {Interaktiver}, einfacher, effizienter",
  year = {2000},
  author = {Thorsten Brunklaus},
  abstract = {Diese Arbeit beschreibt Konzept, Entwurf und Implementierung des Inspectors. Der Inspector ist ein
 interaktives, grafisches Werkzeug zur Darstellung von
 Oz-Datenstrukturen.
 
 Oz-Datenstrukturen sind komplex und deren Darstellung erfordert
 ein grafisches Werkzeug. Aus Sicht des Benutzers muß ein solches
 vor allem sehr effizient, flexibel und interaktiv sein.
 
 In dieser Arbeit wird ein System vorgestellt, daß diese
 Anforderungen durch einen zweistufigen Ansatz erf{\"u}llt. Dieser
 besteht darin, neben effizienten Basisdiensten einen flexiblen
 Transformationsmechanismus einzusetzen.
 
 Die vorgestellte Implementierung ist hochmodular und sehr
 kompakt. Deren Effizienz wird schließlich durch Vergleich mit
 einem {\"a}hnlichen System demonstriert.},
  month = feb,
  publisher = {Diplomarbeit. Fachbereich 14 Informatik, Universit{\"a}t des Saarlandes},
  sline = {1530},
  project-key = {C1},
  label = {OzInspector},
  school  = {Universit{\"a}t des Saarlandes}
}

@Misc{url:tcl-tk,
  author = 	 {{Tcl Core Team}},
  title = 	 {Tcl Developer Site},
  year = 	 {2007},
  url = {http://www.tcl.tk/}
}

@Misc{url:strasheela,
  author = 	 {Torsten Anders},
  title = 	 {Strasheela},
  year = 	 {2007},
  url = {http://strasheela.sourceforge.net/strasheela/doc/}
}

@Misc{url:mozEclipse,
  author = 	 {Craig Ugoretz},
  title = 	 {Eclipse/Mozart-Oz Integration},
  year = 	 {2007},
  url = {http://gforge.info.ucl.ac.be/projects/mozeclipse/}
}

@Misc{url:serielleMusik,
  author = 	 {Rudolf Frisius},
  title = 	 {Serielle Musik},
  year = 	 {2007},
  url = {http://www.frisius.de/rudolf/texte/tx317.htm}
}

@TechReport{sudoku-as-constraint,
  author = 	 {Helmut Simonis},
  title = 	 {Sudoku as a Constraint Problem},
  institution =  {Imperial College London},
  year = 	 {2005}
}

